seq(0.1,2)
seq(0.1,10)
seq(0.1,10,0.1)
seq(0.1,2,0.1)
z1 <- -0.826 * seq(0.1,2,0.1)
z2 <- -1.11 * seq(.1,2,.1)
z3 <- c(10.35)
z1
z2
z3
z3 <- rep(10.35,20)
z3
zz <- z1 + z2 + z3
zz
tt <- seq(.1,2,.1)
plot(tt,zz,xlim=range(0,10),ylim=range(0,10))
plot(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
par(new=TRUE)
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
points(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
z1 <- -0.826 * seq(0.1,20,0.1)
z2 <- -1.11 * seq(.1,20,.1)
z3 <- rep(10.35,200)
zz <- z1 + z2 + z3
tt <- seq(.1,20,.1)
points(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
v1 <- -16.52 * seq(0.1,2,0.1)
v2 <- -22.25 * seq(.1,20,.1)
v3 <- rep(208.35,200)
vv <- v1 + v2 + v3
points(tt,vv,type='l',xlim=range(0,10),ylim=range(0,10))
v1 <- -16.52 * seq(0.1,20,0.1)
vv <- v1 + v2 + v3
points(tt,vv,type='l',xlim=range(0,10),ylim=range(0,10))
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
points(tt,zz,type='l',xlim=range(0,10),ylim=range(0,10))
points(tt,vv,type='l',col="green",xlim=range(0,10),ylim=range(0,10))
plot(x1,x2,type='p', xlim=range(0,10),ylim=range(0,10))
points(y1,y2,type='p', col="red", xlim=range(0,10),ylim=range(0,10))
points(tt,vv,type='l',col="blue",xlim=range(0,10),ylim=range(0,10))
ls
ls -al
ll
read.csv()
load("~/lockdpwn/r_archive/machineLearning/rdata/.RData")
load("~/lockdpwn/r_archive/.RData")
x1
x2
library(koNLP)
install.packages("koNLP")
Sys.getenv()
install.packages("koNLP")
version
flibraray
library(koNLP)
localeToCharset()
install.packages("rJava")
install.packages("koNLP")
install.packages("koNLP")
install.packages("rJava")
install.packages("koNLP")
install.packages("rJava")
install.packages("rJava")
install.packages("koNLP")
library(koNLP)
install.packages("KoNLP", repos="http://R-Forge.R-project.org")
install.packages("koNLP")
install.packages("KoNLP")
library(koNLP)
library(KoNLP)
install.packages("KoNLP")
install.packages("httr")
install.packages("curl")
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
install.packages("KoNLP")
library(KoNLP)
useSejongDic()
txt <- readLines('machineLearning/rdata/spam.csv')
txt
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8")
txt
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "CP949")
txt
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8" )
txt
place <- sapply(txt, extractNoun, USE.NAMES = F)
place
Sys.getlocale()
c <- unlist(place)
c
ls
txt
txt <- readLines('machineLearning/rdata/spam.csv')
txt
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8")
head(txt)
Sys.getlocale()
library(KoNLP)
useSejongDic()
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8")
head(txt)
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8" )
head(txt)
txt <- readLines('machineLearning/rdata/spam.csv', encoding = "UTF-8" )
head(txt)
academy
head(academy)
academy <- read.csv("/home/edward/Documents/machine_learning/academy.csv", stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy <- read.csv('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy
head(academy)
academy <- read.csv('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T)
academy <- read.csv('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T, fileEncoding = "cp949")
head(academy)
academy2 <- readLines('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T, fileEncoding = "cp949")
academy2 <- readLines('./machineLearning/rdata/academy.csv', stringsAsFactors = F, header = T)
academy2 <- readLines('./machineLearning/rdata/academy.csv')
head(academy2)
head(academy)
academy2 <- readLines('./machineLearning/rdata/academy.csv',encoding = "cp949")
head(academy2)
academy2 <- iconv(academy2, from="cp949",to="utf-8")
head(academy2)
place <- sapply(txt, extractNoun, USE.NAMES = F)
library(KoNLP)
useSejongDic()
library(KoNLP)
useSejongDic()
sudo useSejongDic()
library(KoNLP)
useSejongDic()
library(KoNLP)
useSejongDic()
place
txt
txt <- iconv(txt, from="cp949", to="utf-8")
place <- sapply(txt, extractNoun, USE.NAMES = F)
head(place)
c<-unlist(place)
c
place <- Filter(function(x) {nchar(x) >= 2} , c)
head(place)
res <- str_replace_all(place, "[^[:alpha:]]", "")
library(stringr)
res <- str_replace_all(place, "[^[:alpha:]]", "")
res
res <- res[res != ""]
res
txt <- readLines('test.txt')
head(txt)
place <- sapply(txt, extractNoun, USE.NAMES = F)
head(place)
useSejongDic()
c<-unlist(place)
place <- Filter(function(x) {nchar(x) >= 2} , c)
head(place)
res <- str_replace_all(place, "[^[:alpha:]]", "")
head(res)
res <- res[res != ""]
res
wordcount <- table(res)
wordcount
wordcount2 <- sort(table(res), decreasing = T)
head(wordcount2)
wordcount2
library(wordcloud)
install.packages("wordcloud")
install.packages("RColorBrewer")
library(wordcloud)
palete <- brewer.pal(8, "Set2")
palate
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palate)
library()
library(RColorBrewer)
palete <- brewer.pal(8, "Set2")
palate
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palate)
str(palete)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palatte)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palate)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, color=palate)
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red,blue,green,orange")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red,blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="[red,blue]")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red","blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="red""blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="blue")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors='"red","blue"')
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=""red","blue"")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="'red'")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors="c(red,blue)")
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=c("red","blue"))
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=c("red","blue","green","oragne"))
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=c("red","blue","green","orange"))
palete
wordcloud(names(wordcount), freq = wordcount, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palete)
txt2 <- readLines('test2.txt')
head(txt2)
place2 <- sapply(txt2, extractNoun, USE.NAMES = F)
useSejongDic()
c2 <- unlist(place2)
place2 <- Filter(function(x) {nchar(x) >= 2} , c2)
res2 <- str_replace_all(place2, "[^[:alpha:]]", "")
res2 <- res2[res2 != ""]
res2
wordcount22 <- table(res2)
wordcount23 <- sort(table(res2), decreasing = T)
wordcloud(names(wordcount22), freq = wordcount22, scale=c(3,1), rot.per = 0.25, min.freq=1, random.order =F, random.color=T, colors=palete)
head(wordcount23)
wordcount[-1]
wordcount22[0]
wordcount22[1]
wordcount22[2]
wordcount22[3]
wordcount22[-1]
matrix(0,5,2)
matrix(1,5,2)
matrix(c(1,3),5,2)
x <- c(1:10)
x <- matrix(x, 2, 5)
x
colnames(x)
colnames(x) <- c('a','e','c','e','q')
colnames(x)
x
x[1,'q']
x[1,2]
x[, 1]
x[1,]
x[,0]
accdata
load("C:/Users/edward/Desktop/tigerk/gitrepo/lockdpwn/r_archive/beginningR/rdata/acctdata.rda")
acctdata
acctdata[,2]
acctdata[,1]
acctdata[,1]''
acctdata[,1].t
acctdata[,1]`.__T__$:base`
acctdata.t
t(acctdata)
A <- matrix(c(6,1,0,-3,-1,2),3,2, byrow = TRUE)
A
t(A)
B <- matrix(c(4,2,0,1,-5,-1),3,2, byrow = TRUE)
B
A + B
mode(A)
type(A)
str(A)
typeof(A)
A * B
A.as.shape
matrix(A)
A
A - B
t(A)
A <- matrix(c(4,0,5,1,2,3,5,5,6),3,3, byrow=1)
A
A <- matrix(c(4,0,5,1,2,3,5,5,6),3,3)
A
A <- matrix(c(4,0,5,1,2,3,5,5,6),3,3, byrow=TRUE)
A
B <- solve(A)
B
A %*% B
B %*% A
address <- list("harry poter", "102 an","heel")
address
str(address)
mode(address
)
mode(A)
address[1]
address[[1]]
people <- c("kim","bob")
scores <- c(17,19)
quiz_scores <- data.frame(people, scores)
quiz_scores
str(quiz_scores)
str(quiz_scores)
mode(quiz_scores)
quiz_scores[1]
quiz_scores[[1]]
quiz_scores[2]
quiz_scores$people
attach(quiz_scores)
scores
minwage <- data.frame(Year = numeric(), Value = numeric())
minwage <- edit(minwage)
minwage
minwage <- edit(minwage)
minwage
minwage[1] * minwage[2]
pwd
pwd(0)
pwd()
ls
ls()
pi
long(pi)
format.factor(pi)
length(pi)
size <- readline("heelo")
size <- readline("heelo")
size <- readline("heelo : ")
options(digits= size)
x <- scan(0)
x <- scan()
x
x <- seq(1:5)
x
x <- seq(1:50,1)
x <- seq(1:50:1)
x <- seq(1:50)
x
search()
i <- c(1:5)
for (n in i)
print(n * 10)
print(n * 10)
print(i * 10)
even <- 0
while(even < 10){
even <- even + 2
print(even)}
percapita
percapita <- read.csv('beginningR/rdata/percapita.rda' , header=1)
percapita
percapita <- read.csv('beginningR/rdata/percapita.rda' , header=TRUE)
percapita <- read.table('beginningR/rdata/percapita.rda' , header=TRUE)
percapita
open('beginningR/rdata/percapita.rda')
load("C:/Users/edward/Desktop/tigerk/gitrepo/lockdpwn/r_archive/beginningR/rdata/percapita.rda")
percapita
median
median(percapita[2:9])
percapita[2:9]
head(percapita)
View(xx)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.8,0.2))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
library(rpart)
library(rpart.plot)
library(e1071)
fit <- rpart(Species ~ . , data=trainData)
rpart.plot(fit)
pred <- predict(fit, testData[,1:4], type="class")
pred <- predict(fit, testData[,1:4], type="class")
confusionMatrix(pred, testData$Species)
library(e1071)
confusionMatrix(pred, testData$Species)
installed.packages("caret")
installed.packages("e1071")
head(iris)
str(iris)
setosa <- iris[iris$Species == 'setosa',]
versicolor <- iris[iris$Species == 'versicolor',]
virginica <- iris[iris$Species == 'virginica',]
# 데이터를 20% 와 80%로 2개로분할한다
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.8,0.2))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
library(rpart)
library(rpart.plot)
library(e1071)
fit <- rpart(Species ~ . , data=trainData)
rpart.plot(fit)
pred <- predict(fit, testData[,1:4], type="class")
confusionMatrix(pred, testData$Species)
install.packages("rpart")
confusionMatrix(pred, testData$Species)
library(caret)
installed.packages("caret")
library(caret)
installed.packages("caret")
library(caret)
download.packages("caret")
download.packages("caret","./")
download.packages("caret","/home/edward/Downlaods")
download.packages("caret","/home/edward/Downloads")
exit
exit()
library(caret)
install.packages("caret")
head(iris)
str(iris)
setosa <- iris[iris$Species == 'setosa',]
versicolor <- iris[iris$Species == 'versicolor',]
virginica <- iris[iris$Species == 'virginica',]
# 데이터를 20% 와 80%로 2개로분할한다
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.8,0.2))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
installed.packages("caret")
library(rpart)
library(rpart.plot)
library(e1071)
library(caret)
fit <- rpart(Species ~ . , data=trainData)
rpart.plot(fit)
pred <- predict(fit, testData[,1:4], type="class")
confusionMatrix(pred, testData$Species)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
confusionMatrix(pred, testData$Species)
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("caret")
library(caret)
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(caret)
install.packages("caret")
install.packages(c('lme4', 'pbkrtest', 'BradleyTerry2', 'car', 'caret'))
library(caret)
install.packages('caret', dependencies = TRUE)
library(caret)
library(caret)
install.packages("nloptr")
install.packages("nloptr", dependencies = TRUE)
library(caret)
install.packages("caret", repos =
"http://cran.stat.ucla.edu/")
install.packages("caret", repos = "http://cran.stat.ucla.edu/")
data(Boston, package = "MASS")
names(Boston)
head(Boston)
attach(Boston)
corr <- cor(Boston)
corr
install.packages("corrplot")
library(corrplot)
# 파란색이 상관관계 높은것, 빨간색이 낮은 것
corrplot(corr, order = "hclust")
ind <- sample(2, nrow(Boston), replace = TRUE, prob = c(0.8, 0.2))
trainData <- Boston[ind == 1, ]
testData <- Boston[ind == 2, ]
fit <- lm(medv ~., data = trainData)
pred <- predict(fit, testData[, 1:13])
plot(pred, testData[, 14], ylim = c(0, 50), xlim = c(0, 50))
abline(0,1)
fi
summary(fit())
summary(fit)
fit <- lm(medv ~ rm, data = trainData)
summary(fit)
pred <- predict(fit, testData[, 1:13])
plot(pred, testData[, 14], ylim = c(0, 50), xlim = c(0, 50))
abline(0,1)
fit <- lm(medv ~., data = trainData)
summary(fit)
pred <- predict(fit, testData[, 1:13])
pred
plot(pred, testData[, 14], ylim = c(0, 50), xlim = c(0, 50))
abline(0, 1)
plot(pred, testData[, 14], ylim = c(0, 50), xlim = c(0, 50))
testData[,14]
pred
data(Boston, package = "MASS")
names(Boston)
head(Boston)
attach(Boston)
corr <- cor(Boston)
install.packages("corrplot")
library(corrplot)
# ?뙆????깋?씠 ?긽愿?愿?怨? ?넂???寃?, 鍮④컙?깋?씠 ?궙??? 寃?
corrplot(corr, order = "hclust")
# ?뜲?씠?꽣瑜? 20%, 80%濡? 2媛쒕줈 遺꾪븷?븳?떎
ind <- sample(2, nrow(Boston), replace = TRUE, prob = c(0.8, 0.2))
trainData <- Boston[ind == 1, ]
testData <- Boston[ind == 2, ]
# ?듃?젅?씠?떇 ?뜲?씠?꽣濡? 紐⑤뜽?쓣 ?븰?뒿?떆?궓?떎
fit <- lm(medv ~., data = trainData)
fit2 <- lm(medv ~ rm, data = trainData)
# ?븰?뒿?떆?궓 紐⑤뜽濡? ?뀒?뒪?듃?뜲?씠?꽣瑜? ?삁痢≫빐蹂몃떎
pred <- predict(fit, testData[, 1:13])
plot(pred, testData[, 14], ylim = c(0, 50), xlim = c(0, 50))
abline(0, 1)
#
